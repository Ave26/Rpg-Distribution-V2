generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // url      = env("DATABASE_URL")
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  dob          String
  Phone_Number Int
  email        String
}

enum UserRole {
  SuperAdmin
  Admin
  Staff
  Driver
}

enum Category {
  Food
  Laundry
  Cosmetics
  Sanitary
  Cleaning
}

model users {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  additionalInfo   UsersAdditionalInfo
  password         String
  roles            UserRole
  username         String              @unique(map: "username_1")
  deliveryLogs     deliveryLogs[]
  assignedProducts assignedProducts[]
  trucks           trucks[]
  record           records[]
}

enum SupplyLevelStatus {
  Normal
  Low
  Critical
}

model stockKeepingUnit {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  code             String            @unique
  weight           Int
  threshold        Int
  products         products?         @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId        String            @unique
  assignedProducts assignedProducts?
  binLocations     binLocations?

  assignedProductsTest assignedProductsTest[]
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  category          Category
  image             String?
  price             Float
  productName       String             @unique
  discontinued      Boolean?           @default(false)
  sku               stockKeepingUnit[]
  supplyLevelStatus SupplyLevelStatus?
  variations        variations[]
  assignedProducts  assignedProducts[]
  // orderedProducts   orderedProducts?
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bins         bins[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model assignedProductsTest {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  count              Int
  sku                stockKeepingUnit @relation(fields: [stockKeepingUnitId], references: [id])
  stockKeepingUnitId String           @db.ObjectId
}

model bins {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable       Boolean            @default(true)
  capacity          Int
  shelfLevel        Int
  row               Int
  // isSelected        Boolean?           @default(false)
  version           Int                @default(0)
  count             Int?
  status            SupplyLevelStatus?
  racks             racks?             @relation(fields: [racksId], references: [id])
  racksId           String?            @db.ObjectId
  assignedProducts  assignedProducts[]
  // orderedProducts   orderedProducts?   @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?            @db.ObjectId
  binLocations      binLocations[]
}

model damageCategory {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  category   String       @unique
  damageBins damageBins[]
}

model damageBins {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  damageCategory damageCategory? @relation(fields: [category], references: [category])
  category       String          @unique
  version        Int?
  isAvailable    Boolean?        @default(true)
  row            Int
  shelf          Int
  PO             String?         @unique
  SO             String?         @unique
  binId          String?         @unique

  // dateCreated      DateTime
  // version          Int?
  // quantity         Int
  // barcodeId        String             @unique 
  // skuName          String             @unique
  // reportType       String     
  // damageCategory   DamageCategory     @default(Default)
  // assignedProducts assignedProducts[]
  // assignedProducts assignedProducts[]
  // assignedProducts assignedProducts[]
  assignedProducts assignedProducts[]
}

enum productStatus {
  Default
  Queuing
  Loaded
  OutForDelivery
  Delivered
}

enum ProductQuality {
  Good
  Damage
  Default
}

enum BoxSize {
  Small
  Medium
  Large
}

model assignedProducts {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  dateReceived   DateTime
  purchaseOrder  String         @unique
  expirationDate DateTime
  boxSize        BoxSize
  quality        ProductQuality
  supplierName   String
  status         productStatus  @default(Default)
  version        Int            @default(0)
  skuCode        String         @unique

  sku            stockKeepingUnit @relation(fields: [skuCode], references: [code])
  products       products?        @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId      String           @unique
  bin            bins?            @relation(fields: [binId], references: [id])
  binId          String?          @db.ObjectId
  users          users?           @relation(fields: [usersId], references: [id])
  usersId        String?          @db.ObjectId
  trucks         trucks?          @relation(fields: [truckName], references: [truckName])
  truckName      String?          @unique
  ordersId       String?          @db.ObjectId
  binLocations   binLocations?    @relation(fields: [binLocationsId], references: [id])
  binLocationsId String?          @db.ObjectId
  // damageBins     damageBins?      @relation(fields: [damageBinsId], references: [id])
  // damageBinsId   String?          @db.ObjectId
  damageBins     damageBins?      @relation(fields: [damageBinsId], references: [id])
  damageBinsId   String?          @db.ObjectId
}

model purchaseOrderOutBound {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  poId String @unique
}

model records {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  clientName   String
  dateCreated  DateTime?
  batchNumber  Int?       @default(1)
  SO           String     @unique
  locationName String     @unique
  authorName   String?    @unique
  truckName    String     @unique
  locations    locations? @relation(fields: [locationName], references: [name])
  author       users?     @relation(fields: [authorName], references: [username])
  trucks       trucks?    @relation(fields: [truckName], references: [truckName])

  orderedProducts orderedProducts[]
}

model orderedProducts {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  recordsId    String         @db.ObjectId
  productName  String
  binLocations binLocations[]
  records      records?       @relation(fields: [recordsId], references: [id])
}

model binLocations {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  quantity          Int
  skuCode           String             @unique
  binId             String             @db.ObjectId
  orderedProductsId String?            @db.ObjectId
  assignedProducts  assignedProducts[]
  bins              bins?              @relation(fields: [binId], references: [id])
  stockKeepingUnit  stockKeepingUnit?  @relation(fields: [skuCode], references: [code])
  orderedProducts   orderedProducts?   @relation(fields: [orderedProductsId], references: [id])
}

enum DeliveryStatus {
  Emergency_Stop
  Gas_Stop
}

type coordinates {
  longitude Float
  latitude  Float
}

type DeliveryMessage {
  timeStamp   DateTime
  status      DeliveryStatus
  coordinates coordinates
  message     String
}

model deliveryLogs {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      TruckAvailability
  trucks      trucks?           @relation(fields: [trucksId], references: [id])
  trucksId    String?           @db.ObjectId
  users       users?            @relation(fields: [driverId], references: [id])
  driverId    String?           @db.ObjectId
  timeStamp   DateTime
  coordinates Coordinates
  locations   locations?
}

enum TruckAvailability {
  Empty
  PartialLoad
  FullLoad
  HalfFull
  InTransit
  Delivered
  ScheduledforPickup
  OnHold
  EmergencyStop
  GasStop
}

model trucks {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  truckName        String             @unique
  plate            String             @unique
  version          Int                @default(0)
  status           TruckAvailability  @default(Empty)
  payloadCapacity  Int
  threshold        Int
  deliveryLogs     deliveryLogs[]
  driver           users?             @relation(fields: [driverId], references: [id])
  driverId         String?            @db.ObjectId
  assignedProducts assignedProducts[]
  records          records[]
  routeCluster     routeCluster?      @relation(fields: [routeClusterId], references: [id])
  routeClusterId   String?            @db.ObjectId
}

enum cluster {
  North
  East
  West
  South
}

model routeCluster {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  cluster cluster  @unique
  trucks  trucks[]
}

type Coordinates {
  longitude Float
  latitude  Float
}

model locations {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  coordinates    Coordinates
  records        records?
  deliveryLogs   deliveryLogs? @relation(fields: [deliveryLogsId], references: [id])
  deliveryLogsId String?       @unique @db.ObjectId
}
