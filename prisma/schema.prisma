generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // url      = env("DATABASE_URL")
  url      = env("DATABASE_URL")
}

enum UserRole {
  SuperAdmin
  Admin
  Staff
  Driver
}

type UsersAdditionalInfo {
  dob          String
  Phone_Number Int
  email        String
}

model users {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  additionalInfo   UsersAdditionalInfo
  password         String
  roles            UserRole
  username         String              @unique(map: "username_1")
  deliveryLogs     deliveryLogs[]
  assignedProducts assignedProducts[]
  trucks           trucks[]
  record           records[]
}

enum InventoryMethod {
  FEFO
  FIFO
  LIFO
}

type comparison_results {
  assignedProductCount Int
  threshold            Int
  status               String
  exceedsThreshold     Int
  skuCode              String
}

model stockKeepingUnit {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  code               String              @unique
  weight             Int
  threshold          Int
  supplierName       String?
  products           products?           @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId          String              @unique
  assignedProducts   assignedProducts?
  binLocations       binLocations?
  product_status_log product_status_log?
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  categories        categories         @relation(fields: [category], references: [category])
  category          String             @unique
  image             String?
  price             Float
  productName       String             @unique
  discontinued      Boolean?           @default(false)
  sku               stockKeepingUnit[]
  supplyLevelStatus SupplyLevelStatus?
  method            String
  assignedProducts  assignedProducts[]
}

model racks {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  isAvailable Boolean @default(true)
  bins        bins[]
}

model categories {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  category String     @unique
  bins     bins[]
  products products[]
}

model bins {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable       Boolean            @default(true)
  capacity          Int
  shelfLevel        Int
  row               Int
  version           Int                @default(0)
  status            SupplyLevelStatus?
  racks             racks              @relation(fields: [rackName], references: [name])
  rackName          String             @unique
  categories        categories         @relation(fields: [category], references: [category])
  category          String             @unique
  assignedProducts  assignedProducts[]
  orderedProductsId String?            @db.ObjectId
  binLocations      binLocations[]
  binPlaceHolder    binPlaceHolder[]
  damageBinReport   damageBinReport[]
}

model binLogReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timeStamp DateTime
  category  String
  rackName  String
}

model binPlaceHolder {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  bin              bins               @relation(fields: [binId], references: [id])
  binId            String             @unique @db.ObjectId
  assignedProducts assignedProducts[]
}

model damageCategories {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  category   String       @unique
  damageBins damageBins[]
}

model damageBins {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  damageCategories damageCategories?  @relation(fields: [category], references: [category])
  category         String             @unique
  action           String
  version          Int?
  isAvailable      Boolean?           @default(true)
  row              Int
  shelf            Int
  PO               String?            @unique @default("")
  SO               String?            @unique @default("")
  binId            String?            @unique @default("")
  assignedProducts assignedProducts[]
}

model damageBinReport {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  bins   bins?   @relation(fields: [binsId], references: [id])
  binsId String? @db.ObjectId
}

enum ProductStatus {
  Default
  Queuing
  Loaded
  OutForDelivery
  Delivered
  Rejected
}

enum ProductQuality {
  Good
  Damage
  Default
}

enum BoxSize {
  Small
  Medium
  Large
}

type DateInfo {
  date DateTime
  type String
}

model assignedProducts {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  dateInfo       DateInfo
  purchaseOrder  String           @unique
  boxSize        BoxSize
  quality        ProductQuality
  status         ProductStatus    @default(Default)
  version        Int              @default(0)
  sku            stockKeepingUnit @relation(fields: [skuCode], references: [code])
  skuCode        String           @unique
  products       products         @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId      String           @unique
  bin            bins             @relation(fields: [binId], references: [id])
  binId          String           @db.ObjectId
  users          users?           @relation(fields: [usersId], references: [id])
  usersId        String?          @db.ObjectId
  trucks         trucks?          @relation(fields: [truckName], references: [truckName])
  truckName      String?          @unique
  ordersId       String?          @db.ObjectId
  binLocations   binLocations?    @relation(fields: [binLocationsId], references: [id])
  binLocationsId String?          @db.ObjectId

  damageBins       damageBins?     @relation(fields: [damageBinsId], references: [id])
  damageBinsId     String?         @db.ObjectId
  binPlaceHolder   binPlaceHolder? @relation(fields: [binPlaceHolderId], references: [id])
  binPlaceHolderId String?         @db.ObjectId
}

model purchaseOrderOutBound {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  poId String @unique
}

model records {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  clientName   String
  dateCreated  DateTime?
  batchNumber  Int?       @default(1)
  SO           String     @unique
  locationName String     @unique
  authorName   String?    @unique
  truckName    String     @unique
  locations    locations? @relation(fields: [locationName], references: [name])
  author       users?     @relation(fields: [authorName], references: [username])
  trucks       trucks?    @relation(fields: [truckName], references: [truckName])

  orderedProducts orderedProducts[]
}

model orderedProducts {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  recordsId    String         @db.ObjectId
  productName  String
  binLocations binLocations[]
  records      records        @relation(fields: [recordsId], references: [id])
}

model damageReport {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  sku        String
  quantity   Int
  supplier   String
  damageType String
  action     String
  SO         String?
  PO         String?
  location   String
}

model binLocations {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  quantity          Int
  assignedProducts  assignedProducts[]
  bins              bins?              @relation(fields: [binId], references: [id])
  binId             String             @db.ObjectId
  stockKeepingUnit  stockKeepingUnit?  @relation(fields: [skuCode], references: [code])
  skuCode           String             @unique
  orderedProducts   orderedProducts?   @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?            @db.ObjectId
}

enum DeliveryStatus {
  Emergency_Stop
  Gas_Stop
}

type coordinates {
  longitude Float
  latitude  Float
}

type DeliveryMessage {
  timeStamp   DateTime
  status      DeliveryStatus
  coordinates coordinates
  message     String
}

model deliveryLogs {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      TruckAvailability
  trucks      trucks?           @relation(fields: [trucksId], references: [id])
  trucksId    String?           @db.ObjectId
  users       users?            @relation(fields: [driverId], references: [id])
  driverId    String?           @db.ObjectId
  timeStamp   DateTime
  coordinates Coordinates
  locations   locations?
}

enum TruckAvailability {
  Empty
  PartialLoad
  FullLoad
  HalfFull
  InTransit
  Delivered
  ScheduledforPickup
  Returning
  OnHold
  EmergencyStop
  GasStop
}

model trucks {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  truckName        String             @unique
  plate            String             @unique
  version          Int                @default(0)
  status           TruckAvailability  @default(Empty)
  payloadCapacity  Int
  threshold        Int
  deliveryLogs     deliveryLogs[]
  driver           users?             @relation(fields: [driverId], references: [id])
  driverId         String?            @db.ObjectId
  assignedProducts assignedProducts[]
  records          records[]
  routeCluster     routeCluster?      @relation(fields: [routeClusterId], references: [id])
  routeClusterId   String?            @db.ObjectId
}

enum cluster {
  North
  East
  West
  South
}

model routeCluster {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  cluster cluster  @unique
  trucks  trucks[]
}

type Coordinates {
  longitude Float
  latitude  Float
}

model locations {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  coordinates    Coordinates
  records        records?
  deliveryLogs   deliveryLogs? @relation(fields: [deliveryLogsId], references: [id])
  deliveryLogsId String?       @unique @db.ObjectId
}

// for reporting

enum SupplyLevelStatus {
  HEALTHY // 70% - 100%
  MODERATE // 50% below
  CRITICAL // 10% below 
}

model product_status_log {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  sku                  stockKeepingUnit  @relation(fields: [skuCode], references: [code])
  skuCode              String            @unique
  assignedProductCount Int
  threshold            Int
  timeStamp            DateTime
  exceedsThreshold     Boolean
  status               SupplyLevelStatus
  percentage           Int
}
