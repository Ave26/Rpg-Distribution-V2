generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  dob          String
  Phone_Number Int
  email        String
}

enum UserRole {
  SuperAdmin
  Admin
  Staff
  Driver
}

enum SupplyLevelStatus {
  Normal
  Low
  Critical
}

enum productStatus {
  Default
  Queuing
  Loaded
  OutForDelivery
  Delivered
}

enum Category {
  Food
  Laundry
  Cosmetics
  Sanitary
  Cleaning
}

model users {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  additionalInfo     UsersAdditionalInfo
  password           String
  roles              UserRole
  username           String               @unique(map: "username_1")
  transactionRecords transactionRecords[]
  assignedProducts   assignedProducts[]
  orders             orders[]
  deliveryLogs       deliveryLogs[]
  trucks             trucks[]
}

model transactionRecords {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  orderDate        DateTime?
  totalItems       Int
  totalQuantity    Int
  totalAmount      Int
  users            users?             @relation(fields: [userId], references: [id])
  userId           String             @db.ObjectId
  assignedProducts assignedProducts[]
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  category          Category
  image             String?
  price             Float?
  productName       String
  sku               String?
  supplyLevelStatus SupplyLevelStatus?
  variations        variations[]
  assignedProducts  assignedProducts[]
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bin          bins[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bins {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable      Boolean            @default(true)
  capacity         Int
  shelfLevel       Int
  row              Int
  isSelected       Boolean?           @default(false)
  status           SupplyLevelStatus?
  racks            racks?             @relation(fields: [racksId], references: [id])
  racksId          String?            @db.ObjectId
  assignedProducts assignedProducts[]
}

model assignedProducts {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive          DateTime?
  purchaseOrder        String
  expirationDate       DateTime?
  boxSize              String?
  isDamage             Boolean?
  status               productStatus       @default(Default)
  products             products?           @relation(fields: [productId], references: [id])
  productId            String?             @db.ObjectId
  bin                  bins?               @relation(fields: [binId], references: [id])
  binId                String?             @db.ObjectId
  users                users?              @relation(fields: [usersId], references: [id])
  usersId              String?             @db.ObjectId
  damageBin            damageBin?          @relation(fields: [damageBinId], references: [id])
  damageBinId          String?             @db.ObjectId
  transactionRecords   transactionRecords? @relation(fields: [transactionRecordsId], references: [id])
  transactionRecordsId String?             @db.ObjectId
}

type productOrdered {
  totalQuantity Int
  productName   String
  barcodeId     String
  expiryDate    DateTime
  sku           String
  price         Int
  binIdsEntries String[]
}

model orders {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  clientName     String
  dateCreated    DateTime
  trucks         trucks?          @relation(fields: [truckName], references: [name])
  truckName      String?          @unique
  destination    String
  productOrdered productOrdered[]
  users          users?           @relation(fields: [usersId], references: [id])
  usersId        String?          @db.ObjectId
}

enum DeliveryStatus {
  Emergency_Stop
  Gas_Stop
}

type coordinates {
  longitude Float
  latitude  Float
}

type DeliveryMessage {
  timeStamp   DateTime
  status      DeliveryStatus
  coordinates coordinates
  message     String
}

model deliveryLogs {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user            users           @relation(fields: [usersId], references: [id])
  usersId         String          @db.ObjectId
  deliveryMessage DeliveryMessage
}

enum TruckAvailability {
  Available
  Loaded
  ForRepair
  OutForDelivery
}

model trucks {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  name     String            @unique
  status   TruckAvailability @default(Available)
  driver   users?            @relation(fields: [driverId], references: [id])
  driverId String?           @db.ObjectId
  orders   orders[]
}

model damageBin {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  assignedProducts assignedProducts[]
}
