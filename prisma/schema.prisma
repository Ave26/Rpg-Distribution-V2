generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  Dob          String
  Phone_Number Int
  email        String
}

model products {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId        String @unique
  productName      String
  quantity         Int
  sku              String
  palletteLocation String
  dateReceived     String
  expirationDate   String
  poId             String
  image            String
}

model users {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  additional_Info    UsersAdditionalInfo  @map("additional Info")
  password           String               @unique(map: "password_1")
  roles              String               @default("staff")
  username           String               @unique(map: "username_1")
  productLists       productLists[]
  sampleProductLists sampleProductLists[]
}

model productDetails {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId    String         @unique
  img          String?
  productName  String?
  productLists productLists[]
}

// one to many relationsShip

model productLists {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  quantity         Int?
  dateRecieve      DateTime?
  expirationDate   String?
  price            Float?
  sku              String?
  poId             String?
  status           String?
  paletteLocation  String?
  productType      String?
  user             users?          @relation(fields: [userId], references: [id])
  userId           String?         @db.ObjectId
  productDetails   productDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String?         @db.ObjectId
}

model sampleProductDetails {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId          String?              @unique
  productName        String?
  image              String?
  price              Float?
  category           String?
  sampleProductLists sampleProductLists[]
  paletteLocation    paletteLocation[]
  racks              racks?
}

model sampleProductLists {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder        String?
  boxType              String?
  expirationDate       String?
  receiveDate          String?
  Quality              String?
  Quantity             Int?
  location             String?
  author               users?                @relation(fields: [userId], references: [id])
  userId               String                @db.ObjectId
  sampleProductDetails sampleProductDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId     String                @db.ObjectId
}

// many to many relationship between palletteLocation and productDetails
model paletteLocation {
  id               String                @id @default(auto()) @map("_id") @db.ObjectId
  productDetails   sampleProductDetails? @relation(fields: [productDetailsId], references: [id])
  productDetailsId String                @db.ObjectId
  bin              bin[]
}

model racks {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  category             String?
  section              String?
  column               Int?
  row                  Int?
  sampleProductDetails sampleProductDetails? @relation(fields: [productBarcodeId], references: [barcodeId])
  productBarcodeId     String?               @unique
}

model bin {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  paletteLocation   paletteLocation? @relation(fields: [paletteLocationId], references: [id])
  paletteLocationId String           @db.ObjectId
  maxQuantiy        Int?
}
