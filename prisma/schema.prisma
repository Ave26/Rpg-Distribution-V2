generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  Dob          String
  Phone_Number Int
  email        String
}

enum UserRole {
  Admin
  Staff
}

enum SupplyLevelStatus {
  Normal
  Low
  Critical
}

enum OutboundFlow {
  Queuing
  OnDeliver
  Delivered
}

enum Category {
  Food
  Laundry
  Cosmetics
  Sanitary
  Cleaning
}

model users {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  additional_Info UsersAdditionalInfo @map("additional Info")
  password        String              @unique(map: "password_1")
  roles           String              @default("staff")
  username        String              @unique(map: "username_1")
  assignment      assignment[]
  binLogs         binLogs[]
  OutBoundLog     OutBoundLog?        @relation(fields: [outBoundLogId], references: [id])
  outBoundLogId   String?             @db.ObjectId
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  category          Category
  image             String?
  price             Float?
  productName       String
  sku               String?
  supplyLevelStatus SupplyLevelStatus?
  variations        variations[]
  assigment         assignment[]
  OutBoundLog       OutBoundLog?       @relation(fields: [outBoundLogId], references: [id])
  outBoundLogId     String?            @db.ObjectId
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

// one to many relationsShip

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bin          bins[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bins {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable Boolean            @default(true)
  capacity    Int
  shelfLevel  Int
  row         Int
  isSelected  Boolean?           @default(false)
  status      SupplyLevelStatus?
  racks       racks?             @relation(fields: [racksId], references: [id])
  racksId     String?            @db.ObjectId
  assignment  assignment[]
  binLogs     binLogs[]
}

model binLogs {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  isSelected Boolean
  bin        bins?   @relation(fields: [binId], references: [id])
  binId      String? @db.ObjectId
  users      users   @relation(fields: [usersId], references: [id])
  usersId    String  @db.ObjectId
}

model assignment {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive    DateTime?
  purchaseOrder  String
  expirationDate DateTime?
  boxSize        String?
  isDamage       Boolean?
  isMarked       Boolean?   @default(false)
  products       products?  @relation(fields: [productId], references: [id])
  productId      String?    @db.ObjectId
  bin            bins?      @relation(fields: [binId], references: [id])
  binId          String?    @db.ObjectId
  users          users?     @relation(fields: [usersId], references: [id])
  usersId        String?    @db.ObjectId
  damageBin      damageBin? @relation(fields: [damageBinId], references: [id])
  damageBinId    String?    @db.ObjectId
}

model OutBoundLog {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  outboundFlow OutboundFlow?
  product      products[]
  users        users[]
}

model damageBin {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  assignment assignment[]
}
