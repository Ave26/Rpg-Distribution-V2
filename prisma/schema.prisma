generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  Dob          String
  Phone_Number Int
  email        String
}

model users {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  additional_Info UsersAdditionalInfo @map("additional Info")
  password        String              @unique(map: "password_1")
  roles           String              @default("staff")
  username        String              @unique(map: "username_1")
  assignment      assignment[]
}

model products {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String       @unique
  category    String?
  image       String?
  price       Float?
  productName String
  sku         String?
  variations  variations[]
  assigment   assignment[]
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

// one to many relationsShip

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bin          bin[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bin {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable Boolean      @default(true)
  capacity    Int
  shelfLevel  Int
  isSeleted   Boolean?     @default(false) // outbound
  status      String? // outbound
  assignment  assignment[]
  racks       racks?       @relation(fields: [racksId], references: [id])
  racksId     String?      @db.ObjectId
}

model assignment {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive    DateTime?
  purchaseOrder  String
  expirationDate DateTime?
  boxSize        String?
  isDamage       Boolean?
  products       products?  @relation(fields: [productId], references: [id])
  productId      String?    @db.ObjectId
  bin            bin?       @relation(fields: [binId], references: [id])
  binId          String?    @db.ObjectId
  users          users?     @relation(fields: [usersId], references: [id])
  usersId        String?    @db.ObjectId
  damageBin      damageBin? @relation(fields: [damageBinId], references: [id])
  damageBinId    String?    @db.ObjectId
}

model damageBin {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  assignment assignment[]
}
