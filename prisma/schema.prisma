generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  dob          String
  Phone_Number Int
  email        String
}

enum UserRole {
  SuperAdmin
  Admin
  Staff
  Driver
}

enum Category {
  Food
  Laundry
  Cosmetics
  Sanitary
  Cleaning
}

model users {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  additionalInfo   UsersAdditionalInfo
  password         String
  roles            UserRole
  username         String              @unique(map: "username_1")
  assignedProducts assignedProducts[]
  deliveryLogs     deliveryLogs[]
  trucks           trucks[]
  record           records[]
}

enum SupplyLevelStatus {
  Normal
  Low
  Critical
}

model stockKeepingUnit {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  code             String            @unique
  weight           Int
  threshold        Int
  products         products?         @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId        String            @unique
  assignedProducts assignedProducts?
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  category          Category
  image             String?
  price             Float?
  productName       String             @unique
  discontinued      Boolean?           @default(false)
  sku               stockKeepingUnit[]
  supplyLevelStatus SupplyLevelStatus?
  variations        variations[]
  assignedProducts  assignedProducts[]
  orderedProducts   orderedProducts?
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bins         bins[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bins {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable       Boolean            @default(true)
  capacity          Int
  shelfLevel        Int
  row               Int
  isSelected        Boolean?           @default(false)
  status            SupplyLevelStatus?
  racks             racks?             @relation(fields: [racksId], references: [id])
  racksId           String?            @db.ObjectId
  assignedProducts  assignedProducts[]
  orderedProducts   orderedProducts?   @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?            @db.ObjectId
}

enum productStatus {
  Default
  Queuing
  Loaded
  OutForDelivery
  Delivered
}

enum ProductQuality {
  Good
  Damage
}

enum BoxSize {
  Small
  Medium
  Large
}

model assignedProducts {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive       DateTime
  purchaseOrder     String
  expirationDate    DateTime?
  boxSize           BoxSize
  quality           ProductQuality
  status            productStatus    @default(Default)
  sku               stockKeepingUnit @relation(fields: [skuCode], references: [code])
  skuCode           String           @unique
  products          products?        @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId         String           @unique
  bin               bins?            @relation(fields: [binId], references: [id])
  binId             String?          @db.ObjectId
  users             users?           @relation(fields: [usersId], references: [id])
  usersId           String?          @db.ObjectId
  damageBin         damageBin?       @relation(fields: [damageBinId], references: [id])
  damageBinId       String?          @db.ObjectId
  trucks            trucks?          @relation(fields: [truckName], references: [truckName])
  truckName         String?          @unique
  ordersId          String?          @db.ObjectId
  orderedProducts   orderedProducts? @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?          @db.ObjectId
}

model orderedProducts {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  totalQuantity Int

  assignedProducts assignedProducts[]
  binIdsEntries    String[]
  bins             bins[]
  products         products?          @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId        String             @unique
  record           records?           @relation(fields: [recordId], references: [id])
  recordId         String?            @db.ObjectId
}

model purchaseOrderOutBound {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  poId String @unique

  records records[]
}

model records {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  clientName            String?
  dateCreated           DateTime?
  destination           String?
  orderedProducts       orderedProducts[]
  author                users?                @relation(fields: [authorName], references: [username])
  authorName            String?               @unique
  trucks                trucks?               @relation(fields: [truckName], references: [truckName])
  truckName             String?               @unique
  purchaseOrderOutBound purchaseOrderOutBound @relation(fields: [poId], references: [poId])
  poId                  String                @unique
  batchNumber           Int?                  @default(1)
}

enum DeliveryStatus {
  Emergency_Stop
  Gas_Stop
}

type coordinates {
  longitude Float
  latitude  Float
}

type DeliveryMessage {
  timeStamp   DateTime
  status      DeliveryStatus
  coordinates coordinates
  message     String
}

model deliveryLogs {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user            users           @relation(fields: [usersId], references: [id])
  usersId         String          @db.ObjectId
  deliveryMessage DeliveryMessage
}

enum TruckAvailability {
  // Available
  // Loaded
  // ForRepair
  // OutForDelivery
  Empty
  PartialLoad
  FullLoad
  HalfFull
  InTransit
  Delivered
  ScheduledforPickup
  OnHold
}

// precentage for the loaded capacity

model trucks {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  truckName       String            @unique
  plate           String            @unique
  status          TruckAvailability @default(Empty)
  payloadCapacity Int

  driver           users?             @relation(fields: [driverId], references: [id])
  driverId         String?            @db.ObjectId
  assignedProducts assignedProducts[]
  records          records[]
  routeCluster     routeCluster?      @relation(fields: [routeClusterId], references: [id])
  routeClusterId   String?            @db.ObjectId
}

enum cluster {
  North
  East
  West
  South
}

model routeCluster {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  cluster cluster  @unique
  trucks  trucks[]
}

model damageBin {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  assignedProducts assignedProducts[]
}
