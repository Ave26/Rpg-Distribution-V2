generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  Dob          String
  Phone_Number Int
  email        String
}

model users {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  additional_Info UsersAdditionalInfo @map("additional Info")
  password        String              @unique(map: "password_1")
  roles           String              @default("staff")
  username        String              @unique(map: "username_1")
  productLists    productLists[]
  assignment      assignment[]
}

model products {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId    String         @unique
  category     String?
  image        String?
  price        Float?
  productName  String
  productLists productLists[]
  assigment    assignment[]
}

// one to many relationsShip

model productLists {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrder  String?
  boxType        String?
  expirationDate String?
  receiveDate    String?
  Quality        String?
  Quantity       Int?
  location       String?
  author         users?    @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  products       products? @relation(fields: [productsId], references: [id])
  productsId     String?   @db.ObjectId
}

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  capacity     Int         @default(36)
  bin          bin[] // kung ilang id ang nagawa na is 0 - binQuantity 36
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bin {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable Boolean      @default(true)
  capacity    Int?
  assignment  assignment[]
  racks       racks?       @relation(fields: [racksId], references: [id])
  racksId     String?      @db.ObjectId
}

// check the count assignment and bin max qunatity
model assignment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive    DateTime
  purchaseOrder  String?
  expirationDate DateTime
  products       products? @relation(fields: [productId], references: [id])
  productId      String?   @db.ObjectId
  bin            bin?      @relation(fields: [binId], references: [id])
  binId          String?   @db.ObjectId
  users          users?    @relation(fields: [usersId], references: [id])
  usersId        String?   @db.ObjectId
}
