generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsersAdditionalInfo {
  dob          String
  Phone_Number Int
  email        String
}

enum UserRole {
  SuperAdmin
  Admin
  Staff
  Driver
}

enum SupplyLevelStatus {
  Normal
  Low
  Critical
}

enum Category {
  Food
  Laundry
  Cosmetics
  Sanitary
  Cleaning
}

model users {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  additionalInfo   UsersAdditionalInfo
  password         String
  roles            UserRole
  username         String              @unique(map: "username_1")
  assignedProducts assignedProducts[]
  deliveryLogs     deliveryLogs[]
  trucks           trucks[]
  record           records[]
}

model products {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId         String             @unique
  category          Category
  image             String?
  price             Float?
  productName       String             @unique
  sku               String?
  supplyLevelStatus SupplyLevelStatus?
  variations        variations[]
  assignedProducts  assignedProducts[]
  orderedProducts   orderedProducts?
}

model variations {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  barcodeId   String?   @unique
  sku         String?
  image       String?
  productName String?
  price       Float?
  products    products? @relation(fields: [productsId], references: [id])
  productsId  String?   @db.ObjectId
}

model categories {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  category String? @unique
  capacity Int     @default(36)
  racks    racks[]
}

model racks {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  isAvailable  Boolean     @default(true)
  bin          bins[]
  categories   categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model bins {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable       Boolean            @default(true)
  capacity          Int
  shelfLevel        Int
  row               Int
  isSelected        Boolean?           @default(false)
  status            SupplyLevelStatus?
  racks             racks?             @relation(fields: [racksId], references: [id])
  racksId           String?            @db.ObjectId
  assignedProducts  assignedProducts[]
  orderedProducts   orderedProducts?   @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?            @db.ObjectId
}

enum productStatus {
  Default
  Queuing
  Loaded
  OutForDelivery
  Delivered
}

enum ProductQuality {
  Good
  Damage
}

model assignedProducts {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  dateReceive       DateTime?
  purchaseOrder     String
  expirationDate    DateTime?
  boxSize           String?
  isDamage          Boolean?
  quality           ProductQuality
  status            productStatus    @default(Default)
  products          products?        @relation(fields: [productId], references: [id])
  productId         String?          @db.ObjectId
  bin               bins?            @relation(fields: [binId], references: [id])
  binId             String?          @db.ObjectId
  users             users?           @relation(fields: [usersId], references: [id])
  usersId           String?          @db.ObjectId
  damageBin         damageBin?       @relation(fields: [damageBinId], references: [id])
  damageBinId       String?          @db.ObjectId
  trucks            trucks?          @relation(fields: [truckName], references: [name])
  truckName         String?          @unique
  ordersId          String?          @db.ObjectId
  orderedProducts   orderedProducts? @relation(fields: [orderedProductsId], references: [id])
  orderedProductsId String?          @db.ObjectId
}

model orderedProducts {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  totalQuantity    Int
  assignedProducts assignedProducts[]
  binIdsEntries    String[]
  bins             bins[]
  products         products?          @relation(fields: [barcodeId], references: [barcodeId])
  barcodeId        String             @unique
  record           records?           @relation(fields: [recordId], references: [id])
  recordId         String?            @db.ObjectId
}

model records {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  clientName      String
  dateCreated     DateTime
  destination     String
  orderedProducts orderedProducts[]

  // trucks          trucks[]
  author    users?  @relation(fields: [username], references: [username])
  username  String  @unique
  trucks    trucks? @relation(fields: [truckName], references: [name])
  truckName String? @unique
}

enum DeliveryStatus {
  Emergency_Stop
  Gas_Stop
}

type coordinates {
  longitude Float
  latitude  Float
}

type DeliveryMessage {
  timeStamp   DateTime
  status      DeliveryStatus
  coordinates coordinates
  message     String
}

model deliveryLogs {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  user            users           @relation(fields: [usersId], references: [id])
  usersId         String          @db.ObjectId
  deliveryMessage DeliveryMessage
}

enum TruckAvailability {
  Available
  Loaded
  ForRepair
  OutForDelivery
}

// precentage for the loaded capacity

model trucks {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String             @unique
  status           TruckAvailability  @default(Available)
  // routeCluster     String
  // capacity         Int
  driver           users?             @relation(fields: [driverId], references: [id])
  driverId         String?            @db.ObjectId
  assignedProducts assignedProducts[]
  records          records[]
}

model damageBin {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  assignedProducts assignedProducts[]
}
